# This file uses golang text templates (http://golang.org/pkg/text/template/) to
# dynamically configure the haproxy loadbalancer.
global
    daemon
    stats socket /tmp/haproxy

{{ if .cfg.enableSyslog }}
    # log using a syslog socket
    log /var/run/haproxy.log.socket local0 info
    log /var/run/haproxy.log.socket local0 notice
{{ end }}

{{ if .cfg.enableSSL }}
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK
    ssl-default-bind-options no-tls-tickets
{{ end }}

defaults
    log global

    # Enable session redistribution in case of connection failure.
    option redispatch

    # Disable logging of null connections (haproxy connections like checks). 
    # This avoids excessive logs from haproxy internals.
    option dontlognull

    # Enable HTTP connection closing on the server side.
    option http-server-close

    # Enable insertion of the X-Forwarded-For header to requests sent to 
    # servers and keep client IP address.
    option forwardfor

    # Enable HTTP keep-alive from client to server.
    option http-keep-alive

    # Clients should send their full http request in {{ .cfg.httpRequestTimeout }}s.
    timeout http-request    {{ .cfg.httpRequestTimeout }}s

    # Maximum time to wait for a connection attempt to a server to succeed.
    timeout connect         {{ .cfg.connectTimeout }}s

    # Maximum inactivity time on the client side.
    # Applies when the client is expected to acknowledge or send data.
    timeout client          {{ .cfg.clientTimeout }}s

    # Inactivity timeout on the client side for half-closed connections.
    # Applies when the client is expected to acknowledge or send data 
    # while one direction is already shut down.
    timeout client-fin      {{ .cfg.clientFinTimeout }}s

    # Maximum inactivity time on the server side.
    timeout server          {{ .cfg.serverTimeout }}s

    # timeout to use with WebSocket and CONNECT
    timeout tunnel          {{ .cfg.tunnelTimeout }}s

    # Maximum allowed time to wait for a new HTTP request to appear.
    timeout http-keep-alive {{ .cfg.httpKeepAliveTimeout }}s

    # default traffic mode is http
    # mode is overwritten in case of tcp services
    mode http

    # default default_backend. This allows custom default_backend in frontends
    default_backend default-backend

# haproxy stats, required hostport and firewall rules for :1936
listen stats
    bind *:1936
    stats enable
    stats hide-version
    stats realm Haproxy\ Statistics
    stats uri /

{{ if .cfg.enableSSL }}
frontend httpsfrontend
    # Frontend bound on all network interfaces on port 80
    bind *:443 ssl {{ .services.Hosts | buildCerts }}
{{range $host := .services.Hosts}}
    acl host_acl_{{ $host.Name | replaceDot }} hdr(host) {{ $host.Name }}
    acl sni_acl_{{ $host.Name | replaceDot }} ssl_fc_sni {{ $host.Name }}
    {{ range $i, $loc := $host.Locations }}
    acl url_acl_{{ $host.Name | replaceDot }}_{{ $i }} path_beg {{ $loc.Path }}
    use_backend {{ $loc.Backend.Name }} if host_acl_{{ $host.Name | replaceDot }} url_acl_{{ $host.Name | replaceDot }}_{{ $i }} sni_acl_{{ $host.Name | replaceDot }}
    {{ end }}
{{ end }}
{{ end }}

frontend httpfrontend
    # Frontend bound on all network interfaces on port 80
    bind *:80

    # inherit default mode, needs changing for tcp
    # forward everything meant for /foo to the foo backend
    # default_backend foo
    # in case of host header routing it will add a new acl and use an or
    # condition to determine the backend to be used
    # the style of if/else blocks is meant to preserves the format of the output config file
{{range $host := .services.Hosts}}
    acl host_acl_{{ $host.Name | replaceDot }} hdr(host) {{ $host.Name }}
    {{ range $i, $loc := $host.Locations }}
    acl url_acl_{{ $host.Name | replaceDot }}_{{ $i }} path_beg {{ $loc.Path }}
    use_backend {{ $loc.Backend.Name }} if host_acl_{{ $host.Name | replaceDot }} url_acl_{{ $host.Name | replaceDot }}_{{ $i }}
    {{ end }}
{{ end }}

{{range $backend := .services.Backends}}
backend {{ $backend.Name }}
    option  httplog
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

    balance {{ $backend.Algorithm }}
    # TODO: Make the path used to access a service customizable.
    {{ range $i, $rewrite := $backend.RewriteRules }}
    acl acl_{{ $i }} path_beg {{ $rewrite.Origin }}
    {{ end }}
    {{ range $i, $rewrite := $backend.RewriteRules }}
    reqrep ^([^\ :]*)\ {{ $rewrite.Origin }}(.*) \1\ {{ $rewrite.Target }}\2 if acl_{{ $i }}
    {{ end }}
{{if and $backend.SessionAffinity (not $backend.CookieStickySession)}}
    # create a stickiness table using client IP address as key
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#stick-table
    stick-table type ip size 100k expire 30m
    stick on src
    {{range $ep := $backend.Endpoints }}server {{ $ep.Addr }} {{ $ep.Addr }}:{{ $ep.Port }} check port {{$ep.Port}} inter 5
    {{end}}
{{end}}
{{if and $backend.SessionAffinity $backend.CookieStickySession}}
    # insert a cookie with name SERVERID to stick a client with a backend server
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4.2-cookie
    cookie SERVERID insert indirect nocache
    {{range $ep := $backend.Endpoints }}server {{ $ep.Addr }} {{ $ep.Addr }}:{{ $ep.Port }} check port {{$ep.Port}} inter 5
    {{end}}
{{end}}
{{if and (not $backend.SessionAffinity) (not $backend.CookieStickySession)}}
    {{range $ep := $backend.Endpoints }}server {{ $ep.Addr }} {{ $ep.Addr }}:{{ $ep.Port }} check port {{$ep.Port}} inter 5
    {{end}}
{{end}}
{{end}}
